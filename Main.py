import pickle
import matplotlib.pyplot as plt
from Autoencoder import auto_encoder_3d, create_auto_encoder
from Delenox_Config import *

if __name__ == '__main__':

    # Lists for the training population of an iteration, and the history of all training populations
    training_history = []
    training_population = []

    # Flag to test a static configuration of DeLeNoX, where no transformation phases take place
    static = False

    # Loop through the phase numbers provided, if the list starts from a value greater than zero, it resumes the experiment from the given phase
    for phase in range(number_of_phases):

        # If this is the first iteration of DeLeNoX, use the NEAT population seeds provided
        if phase == 0:
            neat_generators = [pickle.load(open("Delenox_Experiment_Data/Seed/Neat_Population_{:d}.pkl".format(runs),
                                                "rb")) for runs in range(runs_per_phase)]
        else:
            # Otherwise, load up the populations generated by the previous phase
            neat_generators = [pickle.load(open("Delenox_Experiment_Data/Phase{:d}/Neat_Population_{:d}.pkl".format(phase-1, runs),
                                                "rb")) for runs in range(runs_per_phase)]

        # Execute the exploration phase and get the resulting population of novel individuals and statistics.
        neat_metrics = {'Mean Novelty': [],
                        'Best Novelty': [],
                        'Node Complexity': [],
                        'Connection Complexity': [],
                        'Archive Size': [],
                        'Species Count': [],
                        'Infeasible Size': [],
                        }

        for number in range(len(neat_generators)):

            # Run the NEAT phase and update the generator and novel population accordingly
            (generator, best_fit, metrics) = neat_generators[number].run_neat(phase, static)
            training_population += list(best_fit)

            # Save the neat populations to pickle files in the current phase folder
            with open("./Delenox_Experiment_Data/Phase{:d}/Neat_Population_{:d}.pkl".format(phase, number), "wb+") as f:
                pickle.dump(generator, f)

            # Update the metrics dictionary with this phase' results
            for key in metrics.keys():
                neat_metrics[key].append(metrics[key])

        # Save the metrics to a numpy file for later extraction
        np.save("./Delenox_Experiment_Data/Phase{:d}/Metrics.npy".format(phase), neat_metrics)

        # Update the training history with the novel population of this phase
        training_history += list(training_population)

        # Create a new auto-encoder with the data generated from this iteration's exploration phase
        ae, encoder, decoder = create_auto_encoder(model_type=auto_encoder_3d,
                                                   phase=phase,
                                                   population=np.asarray(training_history),
                                                   noisy=None)

        # Save the novel population to a numpy file and clear the python list
        np.save("./Delenox_Experiment_Data/Phase{:d}/Training_Set.npy".format(phase), np.asarray(training_population))
        training_population.clear()

        # Clear the plotting library's cache to make sure we aren't wasting memory
        plt.close('all')
